
public class Solution {
	int BIG_NUM = 2000000999;
	
	int[][] visited;
	int tryNum = 0;
	
	int[] queueR;
	int[] queueC;
	
	int front = 0;
	int back = 0;
	
	public int solution(int[][] A) {
		visited = A;
		int rows = A.length;
		int cols = A[0].length;
		int[] queueR = new int[rows*cols];
		int[] queueC = new int[rows*cols];
		int ans = 0;
		for(int i = 0; i < rows; i++) {
			for(int j = 0; j < cols; j++) {
				if(visited[i][j] < BIG_NUM) {
					tryPosition(i, j);
					ans++;
				}
			}
		}
		return ans;
    }
	
	private void tryPosition(int r, int c) {
		reset();
		push(r, c);
		tryNum = visited[r][c];
		visited[r][c] = BIG_NUM;
		while(hasElements()) {
			int[] rc = pop();
			if(rc == null) {
				System.out.println("Queue empty?");
				break;
			}
			pushIfOk(rc[0]-1, rc[1]);
			pushIfOk(rc[0], rc[1]-1);
			pushIfOk(rc[0]+1, rc[1]);
			pushIfOk(rc[0], rc[1]+1);
		}
	}

	private void pushIfOk(int i, int j) {
		if(!valid(i, j)) {
			return ;
		}
		if(visited[i][j] < BIG_NUM) {
			push(i,j);
			visited[i][j] = BIG_NUM;
		}
	}

	private int[] pop() {
		int rr = queueR[front];
		int cc = queueC[front];
		front++;
		return new int[]{rr, cc};
	}

	private boolean hasElements() {
		if(front + 1 >= back) {
			return false;
		}
		return true;
	}

	private void push(int r, int c) {
		if(!valid(r, c)) {
			return ;
		}
		queueR[back] = r;
		queueC[back] = c;
		back++;
	}

	private void reset() {
		front = 0;
		back = 1;
	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		int[][] A = new int[][]{{5, 4, 4}, {4, 3, 4}, {3, 2, 4}, {2, 2, 2}, {3, 3, 4}, {1, 4, 4}, {4, 1, 1}};
		System.out.println(A.length);
		System.out.println(A[0].length);
		//new Solution().solution(A);
	}

}
