package com.sky.dvdstore;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

public class TestDvdService {

	private DvdService dvdService;
	
	@Before
	public void setUp() throws Exception {
		DvdRepository dvdRepositoryStub = new DvdRepositoryStub();
		dvdService = getDvdService(dvdRepositoryStub);
	}

	protected DvdService getDvdService(DvdRepository dvdRepositoryStub) {
		SimpleDvdService simpleDvdService = new SimpleDvdService(dvdRepositoryStub);
		return simpleDvdService;
	}
	
	@Test
	public void testRetrieveDvd() throws Exception {
		Dvd dvd;
		// test retrieving invalid dvd reference.
		try {
			dvd = dvdService.retrieveDvd("INVALID-TEXT");
			fail("INVALID-TEXT does not start with DVD- and hence should throw exception.");
		} catch (Exception ile) {
		}
		
		// test retrieving with null dvd reference.
		try {
			dvd = dvdService.retrieveDvd(null);
			fail("null does not start with DVD- and hence should throw exception.");
		} catch (Exception ile) {
		}
		
		// test retrieving an unknown dvd reference.
		try {
			dvd = dvdService.retrieveDvd("DVD-999");
			fail("DVD-999 is not present in repository and hence it should throw DvdNotFoundException");
		} catch (DvdNotFoundException dex) {
			// should throw DvdNotFoundException
		} catch (Exception ex) {
			fail("DVD-999 is valid dvd reference!");
		}
		
		// test retrieving top gun dvd.
		try {
			dvd = dvdService.retrieveDvd(DvdRepositoryStub.DVD_TOPGUN_REFERENCE);
			assertEquals("Retrieved Dvd is not the expected Top gun dvd!", DvdRepositoryStub.DVD_TOPGUN_REFERENCE, dvd.getReference());
		} catch (Exception ex) {
			fail(DvdRepositoryStub.DVD_TOPGUN_REFERENCE + " is valid dvd reference and is present in our repository " +
						 " but the code throwed exception!");
		}
		
	}
	
	public void testGetDvdSummary() throws Exception {
		String dvdSummary;
		// test getting summary with invalid dvd reference.
		try {
			dvdSummary = dvdService.getDvdSummary("INVALID-TEXT");
			fail("INVALID-TEXT does not start with DVD- and hence should throw exception.");
		} catch (Exception ile) {
		}
		
		// test getting summary with null dvd reference.
		try {
			dvdSummary = dvdService.getDvdSummary(null);
			fail("null does not start with DVD- and hence should throw exception.");
		} catch (Exception ile) {
		}
		
		// test retrieving an unknown dvd reference.
		try {
			dvdSummary = dvdService.getDvdSummary("DVD-999");
			fail("DVD-999 is not present in repository and hence it should throw DvdNotFoundException");
		} catch (DvdNotFoundException dex) {
			// should throw DvdNotFoundException
		} catch (Exception ex) {
			fail("DVD-999 is valid dvd reference!");
		}
		
		// test retrieving top gun dvd.
		try {
			dvd = dvdService.retrieveDvd(DvdRepositoryStub.DVD_TOPGUN_REFERENCE);
			assertEquals("Retrieved Dvd is not the expected Top gun dvd!", DvdRepositoryStub.DVD_TOPGUN_REFERENCE, dvd.getReference());
		} catch (Exception ex) {
			fail(DvdRepositoryStub.DVD_TOPGUN_REFERENCE + " is valid dvd reference and is present in our repository " +
						 " but the code throwed exception!");
		}
	}

}
