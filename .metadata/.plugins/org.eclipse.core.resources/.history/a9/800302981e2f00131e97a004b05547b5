package dods.foodmarket.main;

import static org.junit.Assert.*;

import java.util.Set;

import org.junit.Before;
import org.junit.Test;

import dods.foodmarket.FoodItem;
import dods.foodmarket.SuperMarket;
import dods.foodmarket.model.MarketManager;
import dods.foodmarket.utils.MarketUtils;

public class TestDefaultMemoryMarketManager {

	private MarketManager marketManager;
	
	@Before
	public void setup() {
		this.marketManager = MarketUtils.getDefaultMemoryMarketManager();
	}
	
	@Test
	public void testGetAllFoodItems() throws Exception {
		Set<FoodItem> foodItems = this.marketManager.getAllFoodItems();
		assertContains(MarketUtils.FOOD_ID_APPLE, foodItems);
		assertContains(MarketUtils.FOOD_ID_ORANGE, foodItems);
		assertContains(MarketUtils.FOOD_ID_CHICKEN, foodItems);
		
		assertNotContains("BAD_ID", foodItems);
	}

	private void assertNotContains(String itemId, Set<FoodItem> foodItems) {
		for(FoodItem foodItem: foodItems) {
			if(foodItem.getId().equals(itemId)) {
				fail("Unknown Item id: " + itemId + " found in default market manager.");
			}
		}
	}

	private void assertContains(String itemId, Set<FoodItem> foodItems) {
		for(FoodItem foodItem: foodItems) {
			if(foodItem.getId().equals(itemId)) {
				return ;
			}
		}
		fail("Item id: " + itemId + " not present in default market manager.");
	}
	
	@Test
	public void testGetAllSuperMarkets() throws Exception {
		Set<SuperMarket> allMarkets = this.marketManager.getAllMarkets();
		assertContainsMarket(MarketUtils.MARKET_ASDA, allMarkets);
		assertContainsMarket(MarketUtils.MARKET_TESCO, allMarkets);
	}

	private void assertContainsMarket(String marketId,
			Set<SuperMarket> allMarkets) {
		for(SuperMarket market : allMarkets) {
			if(market.getId().equals(marketId)) {
				return ;
			}
		}
		fail("Market id : " + marketId + " not found in default market manager.");
	}
	
	@Test
	public void testInStock() throws Exception {
		int quantity = this.marketManager.getQuantity(MarketUtils.MARKET_ASDA, MarketUtils.FOOD_ID_APPLE);
		assertTrue("Default market manager should have apples in ASDA supermarket", quantity > 0);
		// set apple quantity to zero in asda.
		this.marketManager.addOrUpdate(MarketUtils.MARKET_ASDA, MarketUtils.FOOD_ID_APPLE, 0);
		assertTrue("Default market manager did not update apple stock in ASDA correctly", quantity == 0);
	}

}
